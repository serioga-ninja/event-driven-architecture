// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../libs/common/src/graphql/prismagraphql"
  reExport = Directories
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           String   @id @default(uuid())
  email        String   @unique @db.VarChar()
  phone        String   @default("") @db.VarChar()
  firstName    String   @default("") @db.VarChar()
  lastName     String   @default("") @db.VarChar()
  isTfaEnabled Boolean  @default(false)
  tfaSecret    String?  @default("") @db.VarChar()
  entityStatus String   @db.VarChar()
  password     String   @db.VarChar()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Posts    Posts[]
  Comments Comments[]
}

model Posts {
  id           String   @id @default(uuid())
  content      String   @db.Text()
  visibility   String   @default("public") @db.VarChar()
  entityStatus String   @db.VarChar()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    Users?  @relation(fields: [usersId], references: [id])
  usersId String?

  Comments Comments[]
}

model Comments {
  id           String   @id @default(uuid())
  content      String   @db.Text()
  entityStatus String   @db.VarChar()
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    Users  @relation(fields: [usersId], references: [id])
  usersId String

  post    Posts  @relation(fields: [postsId], references: [id])
  postsId String
}
