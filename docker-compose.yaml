# Copyright Broadcom, Inc. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0

services:

  fallback:
    container_name: eda_fallback
    build:
      context: .
      dockerfile: apps/Dockerfile
      target: development
    environment:
      - APP_NAME=fallback
    command: npm run start:debug fallback
    env_file:
      - .env.docker
      - apps/fallback/.env.docker
    depends_on:
      - postgres   # Changed from db to postgres
      - redis
      - rabbitmq
      - kafka
      - zookeeper
      - auth
      - mongo
    volumes:
      - .:/usr/src/app:delegated
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    ports:
      - 9235:9231  # Expose debug port
    develop:
      watch:
        - action: sync
          path: ./src
          target: /user/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  emails:
    container_name: eda_emails
    build:
      context: .
      dockerfile: apps/Dockerfile
      target: development
    environment:
      - APP_NAME=emails
    command: npm run start:debug emails
    env_file:
      - .env.docker
      - apps/emails/.env.docker
    depends_on:
      - postgres   # Changed from db to postgres
      - redis
      - rabbitmq
      - kafka
      - zookeeper
      - auth
      - mongo
    volumes:
      - .:/usr/src/app:delegated
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    ports:
      - 9234:9231  # Expose debug port
    develop:
      watch:
        - action: sync
          path: ./src
          target: /user/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  content:
    container_name: eda_content
    build:
      context: .
      dockerfile: apps/Dockerfile
      target: development
    environment:
      - APP_NAME=content
    command: npm run start:debug content
    env_file:
      - .env.docker
      - apps/content/.env.docker
    depends_on:
      - postgres   # Changed from db to postgres
      - redis
      - rabbitmq
      - kafka
      - zookeeper
      - auth
      - mongo
    volumes:
      - .:/usr/src/app:delegated
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    ports:
      - 3002:3002
      - 9233:9231  # Expose debug port
    develop:
      watch:
        - action: sync
          path: ./src
          target: /user/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  profile:
    container_name: eda_profile
    build:
      context: .
      dockerfile: apps/Dockerfile
      target: development
    environment:
      - APP_NAME=profile
    command: npm run start:debug profile
    env_file:
      - .env.docker
      - apps/profile/.env.docker
    depends_on:
      - postgres   # Changed from db to postgres
      - redis
      - rabbitmq
      - kafka
      - zookeeper
      - auth
      - mongo
    volumes:
      - .:/usr/src/app:delegated
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    ports:
      - 3000:3000
      - 9232:9231  # Expose debug port
    develop:
      watch:
        - action: sync
          path: ./src
          target: /user/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  auth:
    container_name: eda_auth
    build:
      context: .
      dockerfile: ./apps/Dockerfile
      target: development
    environment:
      - APP_NAME=auth
    command: npm run start:debug auth
    env_file:
      - .env.docker
      - ./apps/auth/.env.docker
    depends_on:
      - postgres   # Changed from db to postgres
      - redis
      - rabbitmq
      - kafka
      - zookeeper
      - mongo
    volumes:
      - .:/usr/src/app:delegated
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    ports:
      - 3001:3001
      - 9231:9231  # Expose debug port
    develop:
      watch:
        - action: sync
          path: ./src
          target: /user/src/app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json


  postgres:    # Renamed from db to postgres
    image: postgres:16
    container_name: eda_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: eda_postgres   # Added explicit database name
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:   # Added healthcheck
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5


  redis:
    image: redis:7
    container_name: eda_redis
    ports:
      - 6379:6379

  redisinsight:
    image: redis/redisinsight:latest
    ports:
      - 5540:5540
    depends_on:
      - redis

  rabbitmq:
    image: rabbitmq:management
    ports:
      - 5672:5672
      - 15672:15672

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_DATABASE: main
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongodbdata:/data/db
      - ./.docker/init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - 27017:27017


  #region Kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    container_name: eda_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    container_name: eda_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"  # Adding external port for host access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: eda_kafka_ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  #endregion

volumes:
  mongodbdata:
    driver: local
  postgres_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
